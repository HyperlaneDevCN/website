"use strict";(self.webpackChunkhyperlane_dev_cn_website=self.webpackChunkhyperlane_dev_cn_website||[]).push([[1099],{28453:(e,a,n)=>{n.d(a,{R:()=>s,x:()=>i});var t=n(96540);const r={},d=t.createContext(r);function s(e){const a=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:a},e.children)}},94632:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"reference/libraries/hookmetadata","title":"StandardHookMetadata \u5e93","description":"StandardHookMetadata \u5e93\u63d0\u4f9b\u4e86\u7528\u4e8e\u5904\u7406\u548c\u683c\u5f0f\u5316 Hyperlane hooks \u5143\u6570\u636e\u7684\u5de5\u5177\u3002\u8be5\u5e93\u4f7f\u60a8\u80fd\u591f\u6253\u5305\u548c\u63d0\u53d6\u6d88\u606f\u7684\u76f8\u5173\u4fe1\u606f,\u5982 gas \u9650\u5236\u3001\u9000\u6b3e\u5730\u5740\u548c\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u3002","source":"@site/docs/reference/libraries/hookmetadata.mdx","sourceDirName":"reference/libraries","slug":"/reference/libraries/hookmetadata","permalink":"/docs/reference/libraries/hookmetadata","draft":false,"unlisted":false,"editUrl":"https://github.com/HyperlaneDevCN/website/tree/master/docs/reference/libraries/hookmetadata.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"protocolSidebar","previous":{"title":"\u6d88\u606f","permalink":"/docs/reference/libraries/message"},"next":{"title":"\u5355\u5143\u6d4b\u8bd5","permalink":"/docs/guides/developer-tips/unit-testing"}}');var r=n(74848),d=n(28453);const s={},i="StandardHookMetadata \u5e93",o={},u=[{value:"StandardHookMetadata \u5e93",id:"standardhookmetadata-\u5e93-1",level:2}];function m(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsxs)(a.h1,{id:"standardhookmetadata-\u5e93",children:[(0,r.jsx)(a.code,{children:"StandardHookMetadata"})," \u5e93"]})}),"\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"StandardHookMetadata"})," \u5e93\u63d0\u4f9b\u4e86\u7528\u4e8e\u5904\u7406\u548c\u683c\u5f0f\u5316 Hyperlane hooks \u5143\u6570\u636e\u7684\u5de5\u5177\u3002\u8be5\u5e93\u4f7f\u60a8\u80fd\u591f\u6253\u5305\u548c\u63d0\u53d6\u6d88\u606f\u7684\u76f8\u5173\u4fe1\u606f,\u5982 gas \u9650\u5236\u3001\u9000\u6b3e\u5730\u5740\u548c\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u3002"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"\u89e3\u6790\u5143\u6570\u636e"}),": \u51fd\u6570\u5982 ",(0,r.jsx)(a.code,{children:"variant"}),"\u3001",(0,r.jsx)(a.code,{children:"msgValue"}),"\u3001",(0,r.jsx)(a.code,{children:"gasLimit"})," \u548c ",(0,r.jsx)(a.code,{children:"refundAddress"})," \u53ef\u5e2e\u52a9\u60a8\u4ece ABI \u7f16\u7801\u7684\u6570\u636e\u4e2d\u63d0\u53d6\u7279\u5b9a\u7684\u5143\u6570\u636e\u5b57\u6bb5\u3002"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"\u81ea\u5b9a\u4e49\u5143\u6570\u636e"}),": ",(0,r.jsx)(a.code,{children:"getCustomMetadata"})," \u7528\u4e8e\u83b7\u53d6\u6807\u51c6\u5b57\u6bb5\u4e4b\u5916\u7684\u4efb\u4f55\u9644\u52a0\u5143\u6570\u636e\u3002"]}),"\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"\u683c\u5f0f\u5316\u5143\u6570\u636e"}),": ",(0,r.jsx)(a.code,{children:"formatMetadata"})," \u5141\u8bb8\u60a8\u6784\u9020\u5305\u542b gas \u9650\u5236\u3001\u9000\u6b3e\u5730\u5740\u548c\u81ea\u5b9a\u4e49\u6570\u636e\u7b49\u5b57\u6bb5\u7684 ABI \u7f16\u7801\u5143\u6570\u636e\u3002"]}),"\n"]}),"\n",(0,r.jsx)(a.h2,{id:"standardhookmetadata-\u5e93-1",children:"StandardHookMetadata \u5e93"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-solidity",metastring:"file=<rootDir>/node_modules/@hyperlane-xyz/core/contracts/hooks/libs/StandardHookMetadata.sol",children:'// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\n/*@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n     @@@@@  HYPERLANE  @@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n@@@@@@@@@       @@@@@@@@*/\n\n/**\n * Format of metadata:\n *\n * [0:2] variant\n * [2:34] msg.value\n * [34:66] Gas limit for message (IGP)\n * [66:86] Refund address for message (IGP)\n * [86:] Custom metadata\n */\nlibrary StandardHookMetadata {\n    struct Metadata {\n        uint16 variant;\n        uint256 msgValue;\n        uint256 gasLimit;\n        address refundAddress;\n    }\n\n    uint8 private constant VARIANT_OFFSET = 0;\n    uint8 private constant MSG_VALUE_OFFSET = 2;\n    uint8 private constant GAS_LIMIT_OFFSET = 34;\n    uint8 private constant REFUND_ADDRESS_OFFSET = 66;\n    uint256 private constant MIN_METADATA_LENGTH = 86;\n\n    uint16 public constant VARIANT = 1;\n\n    /**\n     * @notice Returns the variant of the metadata.\n     * @param _metadata ABI encoded standard hook metadata.\n     * @return variant of the metadata as uint8.\n     */\n    function variant(bytes calldata _metadata) internal pure returns (uint16) {\n        if (_metadata.length < VARIANT_OFFSET + 2) return 0;\n        return uint16(bytes2(_metadata[VARIANT_OFFSET:VARIANT_OFFSET + 2]));\n    }\n\n    /**\n     * @notice Returns the specified value for the message.\n     * @param _metadata ABI encoded standard hook metadata.\n     * @param _default Default fallback value.\n     * @return Value for the message as uint256.\n     */\n    function msgValue(\n        bytes calldata _metadata,\n        uint256 _default\n    ) internal pure returns (uint256) {\n        if (_metadata.length < MSG_VALUE_OFFSET + 32) return _default;\n        return\n            uint256(bytes32(_metadata[MSG_VALUE_OFFSET:MSG_VALUE_OFFSET + 32]));\n    }\n\n    /**\n     * @notice Returns the specified gas limit for the message.\n     * @param _metadata ABI encoded standard hook metadata.\n     * @param _default Default fallback gas limit.\n     * @return Gas limit for the message as uint256.\n     */\n    function gasLimit(\n        bytes calldata _metadata,\n        uint256 _default\n    ) internal pure returns (uint256) {\n        if (_metadata.length < GAS_LIMIT_OFFSET + 32) return _default;\n        return\n            uint256(bytes32(_metadata[GAS_LIMIT_OFFSET:GAS_LIMIT_OFFSET + 32]));\n    }\n\n    /**\n     * @notice Returns the specified refund address for the message.\n     * @param _metadata ABI encoded standard hook metadata.\n     * @param _default Default fallback refund address.\n     * @return Refund address for the message as address.\n     */\n    function refundAddress(\n        bytes calldata _metadata,\n        address _default\n    ) internal pure returns (address) {\n        if (_metadata.length < REFUND_ADDRESS_OFFSET + 20) return _default;\n        return\n            address(\n                bytes20(\n                    _metadata[REFUND_ADDRESS_OFFSET:REFUND_ADDRESS_OFFSET + 20]\n                )\n            );\n    }\n\n    /**\n     * @notice Returns any custom metadata.\n     * @param _metadata ABI encoded standard hook metadata.\n     * @return Custom metadata.\n     */\n    function getCustomMetadata(\n        bytes calldata _metadata\n    ) internal pure returns (bytes calldata) {\n        if (_metadata.length < MIN_METADATA_LENGTH) return _metadata[0:0];\n        return _metadata[MIN_METADATA_LENGTH:];\n    }\n\n    /**\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\n     * @param _msgValue msg.value for the message.\n     * @param _gasLimit Gas limit for the message.\n     * @param _refundAddress Refund address for the message.\n     * @param _customMetadata Additional metadata to include in the standard hook metadata.\n     * @return ABI encoded standard hook metadata.\n     */\n    function formatMetadata(\n        uint256 _msgValue,\n        uint256 _gasLimit,\n        address _refundAddress,\n        bytes memory _customMetadata\n    ) internal pure returns (bytes memory) {\n        return\n            abi.encodePacked(\n                VARIANT,\n                _msgValue,\n                _gasLimit,\n                _refundAddress,\n                _customMetadata\n            );\n    }\n\n    /**\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\n     * @param _msgValue msg.value for the message.\n     * @return ABI encoded standard hook metadata.\n     */\n    function overrideMsgValue(\n        uint256 _msgValue\n    ) internal view returns (bytes memory) {\n        return formatMetadata(_msgValue, uint256(0), msg.sender, "");\n    }\n\n    /**\n     * @notice Formats the specified gas limit and refund address into standard hook metadata.\n     * @param _gasLimit Gas limit for the message.\n     * @return ABI encoded standard hook metadata.\n     */\n    function overrideGasLimit(\n        uint256 _gasLimit\n    ) internal view returns (bytes memory) {\n        return formatMetadata(uint256(0), _gasLimit, msg.sender, "");\n    }\n\n    /**\n     * @notice Formats the specified refund address into standard hook metadata.\n     * @param _refundAddress Refund address for the message.\n     * @return ABI encoded standard hook metadata.\n     */\n    function overrideRefundAddress(\n        address _refundAddress\n    ) internal pure returns (bytes memory) {\n        return formatMetadata(uint256(0), uint256(0), _refundAddress, "");\n    }\n}\n'})})]})}function l(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);