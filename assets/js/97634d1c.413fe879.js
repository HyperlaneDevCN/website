"use strict";(self.webpackChunkhyperlane_dev_cn_website=self.webpackChunkhyperlane_dev_cn_website||[]).push([[8290],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var o=i(96540);const r={},t=o.createContext(r);function s(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(t.Provider,{value:n},e.children)}},53926:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"reference/libraries/mailboxclient","title":"MailboxClient \u5e93","description":"\u7ee7\u627f MailboxClient \u662f\u786e\u4fdd\u60a8\u7684\u5408\u7ea6\u77e5\u9053\u5728\u54ea\u91cc\u53d1\u9001\u6216\u63a5\u6536\u8de8\u94fe\u6d88\u606f\u7684\u7b80\u5355\u65b9\u6cd5\u3002","source":"@site/docs/reference/libraries/mailboxclient.mdx","sourceDirName":"reference/libraries","slug":"/reference/libraries/mailboxclient","permalink":"/website/docs/reference/libraries/mailboxclient","draft":false,"unlisted":false,"editUrl":"https://github.com/HyperlaneDevCN/website/tree/master/docs/reference/libraries/mailboxclient.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"protocolSidebar","previous":{"title":"Cosmos SDK","permalink":"/website/docs/reference/cosmos-sdk"},"next":{"title":"\u8def\u7531\u5668","permalink":"/website/docs/reference/libraries/router"}}');var r=i(74848),t=i(28453);const s={},l="MailboxClient \u5e93",a={},c=[{value:"MailboxClient \u5e93",id:"mailboxclient-\u5e93-1",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"mailboxclient-\u5e93",children:[(0,r.jsx)(n.code,{children:"MailboxClient"})," \u5e93"]})}),"\n",(0,r.jsxs)(n.p,{children:["\u7ee7\u627f ",(0,r.jsx)(n.a,{href:"https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/v3/solidity/contracts/client/MailboxClient.sol",children:(0,r.jsx)(n.code,{children:"MailboxClient"})})," \u662f\u786e\u4fdd\u60a8\u7684\u5408\u7ea6\u77e5\u9053\u5728\u54ea\u91cc\u53d1\u9001\u6216\u63a5\u6536\u8de8\u94fe\u6d88\u606f\u7684\u7b80\u5355\u65b9\u6cd5\u3002"]}),"\n",(0,r.jsx)(n.p,{children:"\u8fd9\u4e2a\u6df7\u5165\u5408\u7ea6\u7ef4\u62a4\u4e86 Hyperlane \u5f00\u53d1\u8005\u53ef\u80fd\u9700\u8981\u4ea4\u4e92\u7684\u4e09\u4e2a\u5408\u7ea6\u7684\u6307\u9488:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/website/docs/reference/messaging/messaging-interface",children:(0,r.jsx)(n.code,{children:"Mailbox"})})," (\u5fc5\u9700)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/website/docs/reference/hooks/interchain-gas",children:(0,r.jsx)(n.code,{children:"IPostDispatchHook"})})," (\u53ef\u9009)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/website/docs/reference/ISM/specify-your-ISM",children:(0,r.jsx)(n.code,{children:"IInterchainSecurityModule"})})," (\u53ef\u9009)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"MailboxClient"})," \u66b4\u9732\u4e86\u4e00\u4e9b\u51fd\u6570,\u5141\u8bb8\u5b50\u7c7b\u901a\u8fc7 ",(0,r.jsx)(n.code,{children:"mailbox"})," \u5b58\u50a8\u53d8\u91cf\u8f7b\u677e\u5730\u5411 ",(0,r.jsx)(n.code,{children:"Mailbox"})," \u53d1\u9001\u6d88\u606f,\u5e76\u901a\u8fc7 ",(0,r.jsx)(n.code,{children:"onlyMailbox"})," \u4fee\u9970\u7b26\u63a7\u5236\u6d88\u606f\u7684\u4f20\u9012\u6743\u9650\u3002"]}),"\n",(0,r.jsx)(n.h2,{id:"mailboxclient-\u5e93-1",children:"MailboxClient \u5e93"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",metastring:"file=<rootDir>/node_modules/@hyperlane-xyz/core/contracts/client/MailboxClient.sol",children:'// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n/*@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n     @@@@@  HYPERLANE  @@@@@@@\n    @@@@@@@@@@@@@@@@@@@@@@@@@\n   @@@@@@@@@       @@@@@@@@@\n  @@@@@@@@@       @@@@@@@@@\n @@@@@@@@@       @@@@@@@@@\n@@@@@@@@@       @@@@@@@@*/\n\n// ============ Internal Imports ============\nimport {IMailbox} from "../interfaces/IMailbox.sol";\nimport {IPostDispatchHook} from "../interfaces/hooks/IPostDispatchHook.sol";\nimport {IInterchainSecurityModule} from "../interfaces/IInterchainSecurityModule.sol";\nimport {Message} from "../libs/Message.sol";\nimport {PackageVersioned} from "../PackageVersioned.sol";\n\n// ============ External Imports ============\nimport {Address} from "@openzeppelin/contracts/utils/Address.sol";\nimport {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";\n\nabstract contract MailboxClient is OwnableUpgradeable, PackageVersioned {\n    using Message for bytes;\n\n    event HookSet(address _hook);\n    event IsmSet(address _ism);\n\n    IMailbox public immutable mailbox;\n\n    uint32 public immutable localDomain;\n\n    IPostDispatchHook public hook;\n\n    IInterchainSecurityModule public interchainSecurityModule;\n\n    uint256[48] private __GAP; // gap for upgrade safety\n\n    // ============ Modifiers ============\n    modifier onlyContract(address _contract) {\n        require(\n            Address.isContract(_contract),\n            "MailboxClient: invalid mailbox"\n        );\n        _;\n    }\n\n    modifier onlyContractOrNull(address _contract) {\n        require(\n            Address.isContract(_contract) || _contract == address(0),\n            "MailboxClient: invalid contract setting"\n        );\n        _;\n    }\n\n    /**\n     * @notice Only accept messages from an Hyperlane Mailbox contract\n     */\n    modifier onlyMailbox() {\n        require(\n            msg.sender == address(mailbox),\n            "MailboxClient: sender not mailbox"\n        );\n        _;\n    }\n\n    constructor(address _mailbox) onlyContract(_mailbox) {\n        mailbox = IMailbox(_mailbox);\n        localDomain = mailbox.localDomain();\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @notice Sets the address of the application\'s custom hook.\n     * @param _hook The address of the hook contract.\n     */\n    function setHook(\n        address _hook\n    ) public virtual onlyContractOrNull(_hook) onlyOwner {\n        hook = IPostDispatchHook(_hook);\n        emit HookSet(_hook);\n    }\n\n    /**\n     * @notice Sets the address of the application\'s custom interchain security module.\n     * @param _module The address of the interchain security module contract.\n     */\n    function setInterchainSecurityModule(\n        address _module\n    ) public onlyContractOrNull(_module) onlyOwner {\n        interchainSecurityModule = IInterchainSecurityModule(_module);\n        emit IsmSet(_module);\n    }\n\n    // ======== Initializer =========\n    function _MailboxClient_initialize(\n        address _hook,\n        address _interchainSecurityModule,\n        address _owner\n    ) internal onlyInitializing {\n        __Ownable_init();\n        setHook(_hook);\n        setInterchainSecurityModule(_interchainSecurityModule);\n        _transferOwnership(_owner);\n    }\n\n    function _isLatestDispatched(bytes32 id) internal view returns (bool) {\n        return mailbox.latestDispatchedId() == id;\n    }\n\n    function _isDelivered(bytes32 id) internal view returns (bool) {\n        return mailbox.delivered(id);\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);