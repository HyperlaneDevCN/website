"use strict";(self.webpackChunkhyperlane_dev_cn_website=self.webpackChunkhyperlane_dev_cn_website||[]).push([[5835],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(96540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}},42116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>_,frontMatter:()=>u,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"reference/libraries/router","title":"Router \u5e93","description":"\u5e0c\u671b\u7f16\u5199\u4e00\u6b21\u5408\u7ea6\u5e76\u5728\u591a\u4e2a\u94fe\u4e0a\u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u5e94\u8be5\u8003\u8651\u4f7f\u7528 Router \u6a21\u5f0f\u3002","source":"@site/docs/reference/libraries/router.mdx","sourceDirName":"reference/libraries","slug":"/reference/libraries/router","permalink":"/website/docs/reference/libraries/router","draft":false,"unlisted":false,"editUrl":"https://github.com/HyperlaneDevCN/website/tree/master/docs/reference/libraries/router.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"protocolSidebar","previous":{"title":"\u90ae\u7bb1\u5ba2\u6237\u7aef","permalink":"/website/docs/reference/libraries/mailboxclient"},"next":{"title":"\u7c7b\u578b\u8f6c\u6362","permalink":"/website/docs/reference/libraries/typecasts"}}');var o=t(74848),i=t(28453);function a(e){const n={mermaid:"mermaid",...(0,i.R)(),...e.components};return(0,o.jsx)(n.mermaid,{value:'\ngraph BT\n    subgraph "Ethereum"\n        R_E[Router]\n        Mailbox_E[(Mailbox)]\n        Mailbox_E -. "mailbox()" .- R_E\n    end\n\n    subgraph "Polygon"\n        R_P[Router]\n        Mailbox_P[(Mailbox)]\n        Mailbox_P -. "mailbox()" .- R_P\n    end\n\n    subgraph "Gnosis"\n        R_G[Router]\n        Mailbox_G[(Mailbox)]\n        Mailbox_G -. "mailbox()" .- R_G\n    end\n\n    R_E -. "routers()" .- R_P -. "routers()" .- R_G\n    R_G -. "routers()" .- R_E'})}function s(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}const u={},d="Router \u5e93",l={},m=[{value:"Router \u5e93",id:"router-\u5e93-1",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"router-\u5e93",children:[(0,o.jsx)(n.code,{children:"Router"})," \u5e93"]})}),"\n",(0,o.jsxs)(n.p,{children:["\u5e0c\u671b\u7f16\u5199\u4e00\u6b21\u5408\u7ea6\u5e76\u5728\u591a\u4e2a\u94fe\u4e0a\u90e8\u7f72\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u8005\u5e94\u8be5\u8003\u8651\u4f7f\u7528 ",(0,o.jsx)(n.a,{href:"https://github.com/hyperlane-xyz/hyperlane-monorepo/blob/v3/solidity/contracts/client/Router.sol",children:(0,o.jsx)(n.code,{children:"Router"})})," \u6a21\u5f0f\u3002"]}),"\n",(0,o.jsx)(n.p,{children:"\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e2d,\u5e94\u7528\u7a0b\u5e8f\u7684\u5408\u7ea6\u5b9e\u4f8b\u90e8\u7f72\u5728\u6bcf\u4e2a\u652f\u6301\u7684\u94fe\u4e0a\u3002\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u77e5\u9053\u5176\u4ed6\u94fe\u4e0a\u5b9e\u4f8b\u7684\u5730\u5740\u3002\u8fd9\u4e9b\u5b9e\u4f8b\u4f7f\u7528 Hyperlane \u4e0e\u8fdc\u7a0b\u94fe\u4e0a\u7684\u5b9e\u4f8b\u8fdb\u884c\u4fe1\u606f\u548c\u72b6\u6001\u7684\u901a\u4fe1\u3002"}),"\n",(0,o.jsx)(s,{}),"\n",(0,o.jsxs)(n.p,{children:["\u5f00\u53d1\u8005\u53ef\u4ee5\u7ee7\u627f ",(0,o.jsx)(n.code,{children:"Router"})," \u6df7\u5165\u5408\u7ea6\u6765\u4f7f\u7528\u8fd9\u79cd\u6a21\u5f0f\u3002",(0,o.jsx)(n.code,{children:"Router"})," \u662f\u4e00\u4e2a ",(0,o.jsx)(n.a,{href:"/website/docs/reference/libraries/mailboxclient",children:(0,o.jsx)(n.code,{children:"MailboxClient"})}),",\u5b83\u8ddf\u8e2a\u8fdc\u7a0b\u94fe\u4e0a\u5176\u4ed6 ",(0,o.jsx)(n.code,{children:"Router"})," \u5408\u7ea6\u7684\u5730\u5740\u3002\u8fd9\u4f7f\u5f97 ",(0,o.jsx)(n.code,{children:"Router"})," \u53ef\u4ee5\u76f4\u63a5\u5411\u5176\u4ed6 ",(0,o.jsx)(n.code,{children:"Router"})," \u53d1\u9001\u6d88\u606f\u800c\u65e0\u9700\u6307\u5b9a\u5730\u5740\u3002\u5b83\u8fd8\u5141\u8bb8 ",(0,o.jsx)(n.code,{children:"Router"})," \u62d2\u7edd\u6765\u81ea\u5176\u4ed6\u4e0d\u53d7\u4fe1\u4efb\u53d1\u9001\u8005\u7684\u6d88\u606f\u3002"]}),"\n",(0,o.jsx)(n.h2,{id:"router-\u5e93-1",children:"Router \u5e93"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-solidity",metastring:"file=<rootDir>/node_modules/@hyperlane-xyz/core/contracts/client/Router.sol",children:'// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.6.11;\n\n// ============ Internal Imports ============\nimport {IMessageRecipient} from "../interfaces/IMessageRecipient.sol";\nimport {IPostDispatchHook} from "../interfaces/hooks/IPostDispatchHook.sol";\nimport {IInterchainSecurityModule} from "../interfaces/IInterchainSecurityModule.sol";\nimport {MailboxClient} from "./MailboxClient.sol";\nimport {EnumerableMapExtended} from "../libs/EnumerableMapExtended.sol";\n\n// ============ External Imports ============\nimport {Strings} from "@openzeppelin/contracts/utils/Strings.sol";\n\nabstract contract Router is MailboxClient, IMessageRecipient {\n    using EnumerableMapExtended for EnumerableMapExtended.UintToBytes32Map;\n    using Strings for uint32;\n\n    // ============ Mutable Storage ============\n    EnumerableMapExtended.UintToBytes32Map internal _routers;\n\n    uint256[48] private __GAP; // gap for upgrade safety\n\n    constructor(address _mailbox) MailboxClient(_mailbox) {}\n\n    // ============ External functions ============\n    function domains() external view returns (uint32[] memory) {\n        return _routers.uint32Keys();\n    }\n\n    /**\n     * @notice Returns the address of the Router contract for the given domain\n     * @param _domain The remote domain ID.\n     * @dev Returns 0 address if no router is enrolled for the given domain\n     * @return router The address of the Router contract for the given domain\n     */\n    function routers(uint32 _domain) public view virtual returns (bytes32) {\n        (, bytes32 _router) = _routers.tryGet(_domain);\n        return _router;\n    }\n\n    /**\n     * @notice Unregister the domain\n     * @param _domain The domain of the remote Application Router\n     */\n    function unenrollRemoteRouter(uint32 _domain) external virtual onlyOwner {\n        _unenrollRemoteRouter(_domain);\n    }\n\n    /**\n     * @notice Register the address of a Router contract for the same Application on a remote chain\n     * @param _domain The domain of the remote Application Router\n     * @param _router The address of the remote Application Router\n     */\n    function enrollRemoteRouter(\n        uint32 _domain,\n        bytes32 _router\n    ) external virtual onlyOwner {\n        _enrollRemoteRouter(_domain, _router);\n    }\n\n    /**\n     * @notice Batch version of `enrollRemoteRouter`\n     * @param _domains The domains of the remote Application Routers\n     * @param _addresses The addresses of the remote Application Routers\n     */\n    function enrollRemoteRouters(\n        uint32[] calldata _domains,\n        bytes32[] calldata _addresses\n    ) external virtual onlyOwner {\n        require(_domains.length == _addresses.length, "!length");\n        uint256 length = _domains.length;\n        for (uint256 i = 0; i < length; i += 1) {\n            _enrollRemoteRouter(_domains[i], _addresses[i]);\n        }\n    }\n\n    /**\n     * @notice Batch version of `unenrollRemoteRouter`\n     * @param _domains The domains of the remote Application Routers\n     */\n    function unenrollRemoteRouters(\n        uint32[] calldata _domains\n    ) external virtual onlyOwner {\n        uint256 length = _domains.length;\n        for (uint256 i = 0; i < length; i += 1) {\n            _unenrollRemoteRouter(_domains[i]);\n        }\n    }\n\n    /**\n     * @notice Handles an incoming message\n     * @param _origin The origin domain\n     * @param _sender The sender address\n     * @param _message The message\n     */\n    function handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) external payable virtual override onlyMailbox {\n        bytes32 _router = _mustHaveRemoteRouter(_origin);\n        require(_router == _sender, "Enrolled router does not match sender");\n        _handle(_origin, _sender, _message);\n    }\n\n    // ============ Virtual functions ============\n    function _handle(\n        uint32 _origin,\n        bytes32 _sender,\n        bytes calldata _message\n    ) internal virtual;\n\n    // ============ Internal functions ============\n\n    /**\n     * @notice Set the router for a given domain\n     * @param _domain The domain\n     * @param _address The new router\n     */\n    function _enrollRemoteRouter(\n        uint32 _domain,\n        bytes32 _address\n    ) internal virtual {\n        _routers.set(_domain, _address);\n    }\n\n    /**\n     * @notice Remove the router for a given domain\n     * @param _domain The domain\n     */\n    function _unenrollRemoteRouter(uint32 _domain) internal virtual {\n        require(_routers.remove(_domain), _domainNotFoundError(_domain));\n    }\n\n    /**\n     * @notice Return true if the given domain / router is the address of a remote Application Router\n     * @param _domain The domain of the potential remote Application Router\n     * @param _address The address of the potential remote Application Router\n     */\n    function _isRemoteRouter(\n        uint32 _domain,\n        bytes32 _address\n    ) internal view returns (bool) {\n        return routers(_domain) == _address;\n    }\n\n    /**\n     * @notice Assert that the given domain has a Application Router registered and return its address\n     * @param _domain The domain of the chain for which to get the Application Router\n     * @return _router The address of the remote Application Router on _domain\n     */\n    function _mustHaveRemoteRouter(\n        uint32 _domain\n    ) internal view returns (bytes32) {\n        (bool contained, bytes32 _router) = _routers.tryGet(_domain);\n        if (contained) {\n            return _router;\n        }\n        revert(_domainNotFoundError(_domain));\n    }\n\n    function _domainNotFoundError(\n        uint32 _domain\n    ) internal pure returns (string memory) {\n        return\n            string.concat(\n                "No router enrolled for domain: ",\n                _domain.toString()\n            );\n    }\n\n    function _Router_dispatch(\n        uint32 _destinationDomain,\n        uint256 _value,\n        bytes memory _messageBody,\n        bytes memory _hookMetadata,\n        address _hook\n    ) internal returns (bytes32) {\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\n        return\n            mailbox.dispatch{value: _value}(\n                _destinationDomain,\n                _router,\n                _messageBody,\n                _hookMetadata,\n                IPostDispatchHook(_hook)\n            );\n    }\n\n    /**\n     * DEPRECATED: Use `_Router_dispatch` instead\n     * @dev For backward compatibility with v2 client contracts\n     */\n    function _dispatch(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) internal returns (bytes32) {\n        return\n            _Router_dispatch(\n                _destinationDomain,\n                msg.value,\n                _messageBody,\n                "",\n                address(hook)\n            );\n    }\n\n    function _Router_quoteDispatch(\n        uint32 _destinationDomain,\n        bytes memory _messageBody,\n        bytes memory _hookMetadata,\n        address _hook\n    ) internal view returns (uint256) {\n        bytes32 _router = _mustHaveRemoteRouter(_destinationDomain);\n        return\n            mailbox.quoteDispatch(\n                _destinationDomain,\n                _router,\n                _messageBody,\n                _hookMetadata,\n                IPostDispatchHook(_hook)\n            );\n    }\n\n    /**\n     * DEPRECATED: Use `_Router_quoteDispatch` instead\n     * @dev For backward compatibility with v2 client contracts\n     */\n    function _quoteDispatch(\n        uint32 _destinationDomain,\n        bytes memory _messageBody\n    ) internal view returns (uint256) {\n        return\n            _Router_quoteDispatch(\n                _destinationDomain,\n                _messageBody,\n                "",\n                address(hook)\n            );\n    }\n}\n'})})]})}function _(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);